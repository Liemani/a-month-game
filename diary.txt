diary.txt
각 날짜에 몇 시간 동안 어떤 작업을 했는가를 기록

# 2023-05-21
투자 시간: 8h 40m
자잘한 작업을 많이 했다
막 관심있게 만들고 싶었던 부분인 data 관리 부분이 지나고, 나머지 부분은 그렇게 큰 흥미가 있진 않은 것 같다
지금은 그냥 할 일 목록을 보면서 그나마 만들고 싶은 것을 차근차근 추가하고 있다
내일은 상호작용을 만들고 

# 2023-05-20
투자 시간: 7h 10m
collision
third hand

# 2023-05-19
투자 시간: 8h 20m
오늘은 전체적으로 가독성을 정리하는 작업을 했다
WorldScene 에서 camera 를 제거했다
WorldScene 에 world layer 를 추가했다
WorldScene 에 accessable object 를 track 하는 배열을 만들었다

언제 convenience 를 사용해야 하는가에 대한 init 에 대한 이해가 더 깊어졌다
method 이름을 조금 더 잘 짓게 됐다
extension 을 사용하여 가독성을 높였다
구조가 잡혀감에 따라 하향식 개발로 계속 옮겨가고 있다

내일은 move 와 move update 시에 accessable object 들을 봐서 isWalkable() 이 false 인 object 에 충돌하는 기능을 추가하면 될 것 같다
단, 너무 빠른 속도로 벽을 뚫을 수도 있는데, 이를 고려하지는 않을 것이다
구현 후 직접 벽을 뚫어보고나서 생각해보자

# 2023-05-18
투자 시간: 8h 20m
오늘은 GameObject 가 상호작용 하는 구조를 delegate 를 통해 구현했다
menu button touch 와 touch move 를 정밀하게 구현했다
reset 후 world create 시 initial game object 가 추가되도록
CoreDataController.generateInitialGameObjectManagedObjectArray() 를 구현했다

delegate 를 통한 구현은 흐름은 깔끔해지지만, 아무래도 delegate 를 reference 로 저장하다보니 구조가 복잡해질 수 밖에 없다
물런 delegate 를 사용하지 않는다고 하는 것도 말이 안된다
그러면 이벤트 드리븐 방식으로 구현한다면 컨택스트 만들고 큐에 넣고 빼고 하는 작업이 번거로울 것 같다
그리고 난 static 을 사용했는데, factory pattern 이나 description pattern 을 사용했으면 더 좋았을 것 같다
하지만 지금 적용할 필요는 없고, 다음에 눈독들여보자

내일은 isWalkable() == false 인 object 위로 move 하려고 할 때 이동이 제한되는 기능을 구현해야 한다

# 2023-05-17
투자 시간: 8h 40m
오늘은 DiskController 를 완성했다

- Add DiskController.moveCoordinate(of:to:)
- Add GameObject.interact()
- Add GameObject.isWalkable
- Remove GameObject.typeID

GameObject 의 typeID 부분을 정말 고민을 많이 했다
이걸 굳이 저장하지 않고 key 로 갖는 dictionary 를 만들면 좋을텐데
metatype 인 GameObject.Type 은 hashable protocol 을 conform 하지 않아서 dictionary 의 key 로 사용할 수 없었다
어떤 글은 해결 방법으로 GameObject.Type 을 wrap 하는 class 를 정의하여 사용했는데, swift 언어의 의도를 violate 한다는 느낌이 들어서 채택하지는 않았다
더 조사를 해보니 ObjectIdentifier() 라는 함수가 있었다
이 함수의 인자로 metatype 을 주면 metatype 를 식별하는 용도의 ObjectIdentifier type 의 값을 반환해준다
ObjectIdentifier(_: Any) -> ObjectIdentifier
인스턴스도 들어가지만 metatype 도 들어가서 나에게 꼭 필요한 기능이었다
그리고 type(of: Any) -> metatype 을 함께 사용하면 마침내 어떤 instance 의 class type identifier 를 얻을 수 있다

오늘까지 해서 기초적인 기능은 사운드를 제외하고는 다 훑어 봤다
내일은 터치를 정밀하게 구현해야 한다

# 2023-05-16
투자 시간: 8h 40m
오늘은 어제 요청받은 문서를 작성했다
그리고 CoreData 의 삭제 기능을 구현했다
클래스 관의 연결 구조도 더 예쁘게 수정했다
발생하던 버그들도 일단은 다 잡았다
내일은 GameObject 의 초기 설정, 추가, 저장에서 flow 가 아쉬웠던 부분을 보완한다
그리고 CoreData 의 수정 부분을 추가한다

# 2023-05-15
투자 시간: 6h 10m
CoreData 의 삭제 기능을 추가하면서 클래스 간의 연결 구조도 손보았다
그리고 추가로 요청받은 설계서 중에 화면 설계서를 작성하였다
게임 이름은 Tiny Home 으로 결정했다
내일은 요청받은 문서 전체 기능 설계서, DB 설계서를 작성한다
그리고 CoreData 의 삭제 부분을 구현하면서 생긴 버그들을 수정한다

# 2023-05-14
투자 시간: 6h 10m
오늘은 CoreData 를 사용하여 gameItem 을 저장하는 기능을 구현했다
앞으로 CoreData 를 사용하여 삭제, 수정 기능을 추가해야 한다
그러고 나면 나무 같은 오브젝트를 추가해야 한다

# 2023-05-13
투자 시간: 5h 50m
오늘은 CoreData 를 사용하는 방법을 알아보았다
구조와 사용법이 꽤 복잡해서 아직 적용도 못해봤다
내일 계속 알아봐야겠다

# 2023-05-12
투자 시간: 12h
오늘은 WorldScene 에서 메뉴 윈도우 프로토타입을 만들고,
아이템 클래스들의 부모 클래스인 GameItem 를 정의하였다
그리고 이 클래스를 상속받는 GameItemSeedPineCone 클래스를 정의하고,
GameItemModel 이 Dictionary 형태로 가지고 있는 GameItem 들을 화면에 출력하는 것까지 구현하였다
내일은 GameItem 을 CoreData 로 저장하고 불러오는 기능,
GameObject 를 구현하여 이를 상속받는 GameObjectTreePineTree 를 구현해 볼 예정이다

# 2023-05-11
투자 시간: 8h 20m
오늘은 PortalScene 의 기본 기능을 구현하고 터치 구현을 생각했다
실제 추가된 기능은 많지 않으나 이해하기 쉬운 구조를 만들기 위해 생각을 많이 했다
터치의 구현은 UIGestureRecognizer 를 사용할까 알아보았지만 원하는 기능을 구현하는데 적절하지 않아보인다
그래서 view 에서 발생하는 touch 이벤트를 사용해서 직접 만들려고 한다
내일은 간단하게 WorldScene 에서 메뉴 버튼을 통해 PortalScene 으로 돌아오는 기능을 구현할 예정이다

# 2023-05-10
투자 시간: 5h 10m
오늘은 타일 데이터를 저장하고 불러오는 기능을 완성했고 새로운 장면을 추가하는 작업을 했다
타일이나 오브젝트 등의 데이터는 월드에 속한다
월드를 초기화하는 기능을 구현하고 싶다
그래서 월드에 진입하는 장면을 하나 추가하기로 했다
월드에 진입할지, 초기화할 지 선택할 수 있다
자유로운 표현을 위해 새로운 UIViewController 를 추가하는 것이 아니라 새로운 SKScene 을 추가하기로 했다
내일은 이 새로운 scene 인 PortalScene 을 완성할 수 있으면 좋겠다

# 2023-05-09
투자 시간: 9h 10m
오늘은 데이터 저장에 대해 알아보았다
CoreData 는 relational database 방식으로 데이터를 저장한다
나는 이게 거추장스웝게 느껴져서 더 알아보니 FileManager 를사용하는 방식이 마음에 들었다
타일 하나가 바뀔 때마다 매 번 바뀐 타일 데이터를 저장하기 좋을 것 같다
그러다보니 더 깊게 들어가서 UnsafeMutableBufferPointer 를 사용하게 됐다
이건 좀 swift 스럽지 않긴 하지만 내가 원하는 기능을 구현하기 위해서는 써야할 것 같다
오늘은 코드는 짰지만 아직 작동하지 않는다
내일은 지금 발생하는 에러를 알아봐야겠다

# 2023-05-08
투자 시간: 10h 20m
오늘은 게임의 데이터를 저장하고 불러오는 기능을 구현하려 했으나 처음 해보는 과정이라 대충 어떤 방법이 있는지 조사하는 정도 밖에 하지 못했다
자유롭게 저장하는 것은 iOS 에서 불가능해 보였다
일반적으로 UserDefaults, PList, CoreData 의 3 가지 방법이 있는 것 같다
나는 CoreData 를 사용하기로 했다
gpt 에게 물어보니 UserDefaults 는 내 타일 데이터인 10000 개의 int 값 정도 규모의 데이터를 저장하기 위한 목적으로 만들어지지 않았다고 한다
그리고 오늘은 저장하기 위한 데이터를 생성하기 위해 타일을 1초마다 한 칸씩 바뀌도록 했다
내일은 타일 데이터를 저장하고 불러오는 기능을 추가할 것이다

# 2023-05-07
투자 시간: 약 8h 20m
드래그하고 튕겨서 카메라 이동 초기 버전 구현
라이브러리에서 제공하는 구조체가 담고 있는 값을 적당히 유추해서 구현했다가 제대로 동작하지 않아 다시 출력해보고 수정하느라 시간이 꽤 걸렸다
다음으로, 값을 local storage 에 저장하고 읽는 방식을 알아보는 중이다

# 2023-05-06
투자 시간: 약 7h
간단한 UI 작성

# 2023-05-05
투자 시간: 약 3h
게임 내 오브젝트들의 interface 작성

# 2023-05-04
투자 시간: 약 3h
대략적인 기능 스케치

# 2023-05-03
투자 시간: 약 3h
어떤 게임을 만들 것인지 구상
